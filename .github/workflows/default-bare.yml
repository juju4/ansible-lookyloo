---
name: default-bare

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:  # run weekly, every Thursday
    - cron: '40 2 * * 4'

permissions: {}

jobs:
  build:
    permissions:
      contents: read
    runs-on: ubuntu-${{ matrix.version }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include:
          - distribution: ubuntu
            version: '24.04'
            suite: default
            experimental: true
          - distribution: ubuntu
            version: '22.04'
            suite: default
            experimental: false
    env:
      ANSIBLE_CALLBACKS_ENABLED: profile_tasks
      ANSIBLE_EXTRA_VARS: ""
      ANSIBLE_ROLE: juju4.lookyloo
      ANSIBLE_SUITE: ${{ matrix.suite }}

    steps:
      - uses: actions/checkout@v5
        with:
          path: ${{ env.ANSIBLE_ROLE }}
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install ansible-lint flake8 yamllint
          which ansible
          pip3 install ansible
          pip3 show ansible
          ls -l $HOME/.local/bin || true
          ls -l /opt/hostedtoolcache/Python/3.9.1/x64/bin || true
          echo "/opt/hostedtoolcache/Python/3.9.1/x64/bin" >> $GITHUB_PATH
          ansible --version
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE
          [ -f molecule/$ANSIBLE_SUITE/requirements.yml ] && ansible-galaxy install -r molecule/$ANSIBLE_SUITE/requirements.yml
          [ -f get-dependencies.sh ] && sh -x get-dependencies.sh
          { echo '[defaults]'; echo 'callbacks_enabled = profile_tasks, timer'; echo 'roles_path = ../'; echo 'ansible_python_interpreter: /usr/bin/python3'; } >> ansible.cfg
      - name: Environment
        run: |
          set -x
          pwd
          env
          find -ls
      - name: run test
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$ANSIBLE_SUITE/converge.yml ${ANSIBLE_EXTRA_VARS}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
      - name: idempotency run
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$ANSIBLE_SUITE/converge.yml ${ANSIBLE_EXTRA_VARS} | tee /tmp/idempotency.log | grep -q 'changed=0.*failed=0'  && (echo 'Idempotence test: pass' && exit 0)  || (echo 'Idempotence test: fail' && cat /tmp/idempotency.log && exit 0)
      - name: verify
        run: |
          cd $GITHUB_WORKSPACE/$ANSIBLE_ROLE && ansible-playbook -i localhost, --connection=local --become -vvv molecule/$ANSIBLE_SUITE/verify.yml ${ANSIBLE_EXTRA_VARS}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
      - name: On failure
        run: |
          systemctl -l --no-pager status
          systemctl -l --no-pager --failed
          ls -l /usr/bin/ | egrep '(python|pip|ansible)'
          pip freeze
          pip3 freeze
          ip addr
          cat /etc/resolv.conf
          host www.google.com
          ping -c 1 www.google.com || true
          ping -c 1 8.8.8.8 || true
          ps axuw
          netstat -anp
        if: ${{ failure() }}
        continue-on-error: true
      - name: After script - ansible setup
        run: |
          ansible -i inventory --connection=local -m setup localhost
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - systemd
        run: |
          systemctl -l --no-pager status lookyloo-redis || true
          systemctl -l --no-pager status lookyloo-redis-indexing || true
          systemctl -l --no-pager status lookyloo-archiver || true
          systemctl -l --no-pager status lookyloo-async_capture || true
          systemctl -l --no-pager status lookyloo-background_indexer || true
          systemctl -l --no-pager status lookyloo-background_processing || true
          systemctl -l --no-pager status lookyloo-web || true
          systemctl -l --no-pager status uwhoisd || true
          systemd-analyze --no-pager security || true
          sudo find /etc/systemd/system/ -name 'lookyloo*' -exec cat {} \;
          rsyslogd -v
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - journalctl
        run: |
          set -x
          journalctl -xe -l --no-pager | tail -500
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - files
        run: |
          set -x
          sudo ls -la /var/_lookyloo/
          sudo ls -la /var/_lookyloo/redis
          sudo ls -la /var/_lookyloo/lookyloo
          sudo ls -la /var/_lookyloo/lookyloo/bin
          sudo find /var/_lookyloo/.cache/pypoetry/virtualenvs/ -ipath '/bin' -ls
          sudo cat /var/_lookyloo/lookyloo/config/generic.json
          sudo cat /var/_lookyloo/lookyloo/cache/cache.conf
          sudo cat /var/_lookyloo/lookyloo/indexing/indexing.conf
          sudo ls -la /var/_lookyloo/redis/src/redis-server || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - poetry
        run: |
          set -x
          cd /var/_lookyloo/lookyloo
          sudo -H -u _lookyloo /usr/local/share/poetry/bin/poetry show --tree || true
          sudo -H -u _lookyloo /usr/local/share/poetry/bin/poetry show --outdated || true
          sudo -H -u _lookyloo /usr/local/share/poetry/bin/poetry install --dry-run || true
          sudo -H /usr/local/share/poetry/bin/poetry show --tree || true
          sudo -H /usr/local/share/poetry/bin/poetry show --outdated || true
          sudo -H /usr/local/share/poetry/bin/poetry install --dry-run || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - curl
        run: |
          curl -vL http://localhost:5100 || true
          curl -vL http://localhost:5100/index || true
          curl -vL "http://localhost:5100/capture?url=https://duckduckgo.com" || true
          curl -vL "http://localhost:5100/whois/duckduckgo.com" || true
          curl -X 'GET' 'http://localhost:5100/json/stats' -H 'accept: application/json' || true
          sleep 30
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - logs
        run: |
          set -x
          sudo find /var/log/ -name 'lookyloo*.log' -exec tail -100 {} \;
          sudo find /var/log/ -name 'uwhoisd*.log' -exec tail -100 {} \;
          ls -la /var/log/
          sudo tail -200 /var/log/syslog
          sudo tail -n20 /var/log/lookyloo-*.log
          ls -la /var/_lookyloo/lookyloo/logs/
          tail -n20 /var/_lookyloo/lookyloo/logs/*.log
          sudo grep -C3 apt-get /var/log/auth.log
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - playwright
        run: |
          set -x
          sudo -u _lookyloo playwright screenshot https://github.com /tmp/test.png || true
          file /tmp/test.png || true
        if: ${{ always() }}
        continue-on-error: true
      - name: After script - pylookyloo
        run: |
          set -x
          sudo -u _lookyloo bash -c 'cd /var/_lookyloo/pylookyloo && poetry run pytest tests/testing*.py' || true
        if: ${{ always() }}
        continue-on-error: true
