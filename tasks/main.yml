---

- name: Include version-specific variables for Ubuntu.
  ansible.builtin.include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
  when: ansible_distribution == 'Ubuntu'

- name: Include poetry v1.x variables
  ansible.builtin.include_vars: poetry1.yml
  when:
    - lookyloo_poetry_version is defined
    - lookyloo_poetry_version | length != 0
    - "lookyloo_poetry_version is version('2.0', '<')"
- name: Include poetry v2.x variables
  ansible.builtin.include_vars: poetry2.yml
  when: >
    lookyloo_poetry_version is not defined
    or lookyloo_poetry_version | length == 0
    or lookyloo_poetry_version is version('2.0', '>=')

- name: Set fact is_container
  ansible.builtin.set_fact:
    is_container: true
  when: >
    (ansible_virtualization_type is defined and
      (ansible_virtualization_type == "docker" or ansible_virtualization_type == "containerd")
    )

- name: Ensure archives folder exists
  ansible.builtin.file:
    dest: "{{ install_archives }}"
    state: directory
    mode: '0775'
  become: yes
  become_user: root

- name: Debian | Update cache
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: "{{ lookyloo_apt_cache_valid_time | default('3600') }}"
  become: yes
  become_user: root
  when: ansible_os_family == 'Debian'

- name: Ensure dependencies packages are present
  ansible.builtin.package:
    name: "{{ lookyloo_pkgs }}"
    state: present
  become: yes
  become_user: root
  register: pkg_result
  until: pkg_result is success

- name: Ensure / mounted with flag acl for ansible become unprivileged user
  ansible.posix.mount:
    src: "{{ item.src }}"
    path: "{{ item.path }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.opts }}"
    state: "{{ item.state }}"
  loop: "{{ lookyloo_fstab }}"
  become: yes
  become_user: root
  when:
    - not is_container

- name: Ensure lookyloo user exists
  ansible.builtin.user:
    name: "{{ lookyloo_user }}"
    home: "{{ lookyloo_home }}"
    system: true
    groups: "{{ lookyloo_user_groups | default(omit) }}"
    append: "{% if lookyloo_user_groups is defined and lookyloo_user_groups | length > 0 %}yes{% else %}no{% endif %}"
  become: yes
  become_user: root

- name: Ensure right permissions for lookyloo home
  ansible.builtin.file:
    path: "{{ lookyloo_home }}"
    owner: "{{ lookyloo_user }}"
    mode: '0755'
    state: directory
  become: yes
  become_user: root

- name: Grant user poetry access to archives
  ansible.posix.acl:
    path: "{{ install_archives }}"
    entity: "{{ lookyloo_user }}"
    etype: user
    permissions: rwx
    state: present
  become: yes
  become_user: root

- name: Import poetry
  ansible.builtin.import_tasks: poetry.yml
  vars:
    poetry_user: "{{ lookyloo_user }}"

- name: Import redis-source
  ansible.builtin.import_tasks: redis-source.yml
- name: Import splash-container
  ansible.builtin.import_tasks: splash-container.yml
  when: not is_container and false

- name: Import lookyloo
  ansible.builtin.import_tasks: lookyloo.yml
  become: yes
  become_user: "{{ lookyloo_user }}"

- name: Ensure logrotate is configured
  ansible.builtin.template:
    src: logrotate-lookyloo.j2
    dest: /etc/logrotate.d/lookyloo
    mode: '0644'
    owner: root
    backup: "{{ lookyloo_backup }}"
  become: yes
  become_user: root

- name: Import uwhoisd
  ansible.builtin.import_tasks: uwhoisd.yml
  become: yes
  become_user: "{{ lookyloo_user }}"

- name: Import firewall-ufw
  ansible.builtin.import_tasks: firewall-ufw.yml
  become: yes
  become_user: root
  when:
    - lookyloo_ufw|bool
    - not is_container

- name: Import systemd
  ansible.builtin.import_tasks: systemd.yml
  become: yes
  become_user: root
  when:
    - not is_container

- name: Import pylookyloo
  ansible.builtin.import_tasks: pylookyloo.yml
  become: yes
  become_flags: -H
  become_user: "{{ lookyloo_user }}"
  when:
    - lookyloo_pylookyloo_enable | bool
